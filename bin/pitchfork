#!/usr/bin/env python
import sys
import os
import argparse
from glob import glob
import subprocess

__VERSION__ = '0.0.2'
_whatami  = os.path.basename(sys.argv[0])
_ownpath  = os.path.abspath(__file__)
_whereami = os.path.dirname(_ownpath)
_projhome = os.path.dirname(_whereami)


def backticks(cmd, merge_stderr=True):
    """
    Simulates the perl backticks (``) command with error-handling support
    Returns ( command output as sequence of strings, error code, error message )
    """
    if merge_stderr:
        _stderr = subprocess.STDOUT
    else:
        _stderr = subprocess.PIPE

    p = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=_stderr,
                         close_fds=True)

    out = [l[:-1] for l in p.stdout.readlines()]

    p.stdout.close()
    if not merge_stderr:
        p.stderr.close()

    # need to allow process to terminate
    p.wait()

    errCode = p.returncode and p.returncode or 0
    if p.returncode > 0:
        errorMessage = os.linesep.join(out)
        output = []
    else:
        errorMessage = ''
        output = out

    return output, errCode, errorMessage


def log(*msgs):
    sys.stderr.write(' '.join(str(m) for m in msgs) + '\n')


def parseargs(args):
    desc = 'Pacbio unofficial pitchfork building system.'
    epil = 'This gets you a subroot-like software deployment. The deployment is unrelocatable but easier to understand.'
    parser = argparse.ArgumentParser(
        epilog=epil,
        description=desc)

    parser.add_argument('-V', '--version', help='show version', action='version', version='%s' % __VERSION__)

    subparsers = parser.add_subparsers(
        dest='subcommand',
        title='subcommands',
        help='Run %s --help for more information' % _whatami)

    sub = subparsers.add_parser('configure',
                                help='prints out suggested settings.mk',
                                description='''What's in your settings.mk?''')
    sub.add_argument('--prefix',
                     metavar='<path>',
                     type=str,
                     help='The path of where you want to deploy software to.')
    sub.add_argument('--workspace',
                     metavar='<path>',
                     type=str,
                     help='The path of where you want to build software on.')
    sub.add_argument('--boost',
                     metavar='<path>',
                     type=str,
                     help='The path to pre-extracted boost headers.')
    sub.add_argument('--ccache',
                     metavar='<path>',
                     type=str,
                     help='The path of pre-installed ccache executable.')
    sub.add_argument('--python',
                     metavar='<path>',
                     type=str,
                     help='The path of pre-installed python executable of your choice.')
    sub.add_argument('--zlib',
                     metavar='<path>',
                     type=str,
                     help='The parent path of pre-installed zlib headers+libraries.')

    sub = subparsers.add_parser('installed',
                                help='''Check what's being installed''',
                                description='This will look into the PREFIX directories and list what has been installed.')

    sub = subparsers.add_parser('uninstall', help='''remove a previous installed package''')
    sub.add_argument('--name',
                     metavar='<package>',
                     type=str,
                     help='The name of the package.')

    sub = subparsers.add_parser('fetch',
                                help='prints out suggested settings.mk',
                                description='''What's in your settings.mk?''')
    sub.add_argument('--url',
                     metavar='<url>',
                     type=str,
                     help='The url of distfile.')
    return parser.parse_args()


def pitchfork(args):
    # log('[INFO] args:', args)
    if args.subcommand == 'configure':
        myargs = vars(args)
        if myargs['prefix'] is not None:
            print "PREFIX      = %s" % myargs['prefix']
        if myargs['workspace'] is not None:
            print "WORKDIR     = %s" % myargs['workspace']
        if myargs['boost'] is not None:
            if len("%s" % myargs['boost']) < 1:
                print "HAVE_BOOST  ="
            elif len(glob("%s" % myargs['boost'])) < 1:
                print "HAVE_BOOST  ="
            else:
                print "HAVE_BOOST  = %s" % os.path.abspath(myargs['boost'])
        if myargs['ccache'] is not None:
            if len("%s" % myargs['ccache']) < 1:
                print "HAVE_CCACHE ="
            elif len(glob("%s" % myargs['ccache'])) < 1:
                print "HAVE_CCACHE ="
            else:
                print "HAVE_CCACHE = %s" % os.path.abspath(myargs['ccache'])
        if myargs['python'] is not None:
            if len("%s" % myargs['python']) < 1:
                print "HAVE_PYTHON ="
            elif len(glob("%s" % myargs['python'])) < 1:
                print "HAVE_PYTHON ="
            else:
                print "HAVE_PYTHON = %s" % os.path.abspath(myargs['python'])
        if myargs['zlib'] is not None:
            if len("%s" % myargs['zlib']) < 1:
                print "HAVE_ZLIB   ="
            elif len(glob("%s" % myargs['zlib'])) < 1:
                print "HAVE_ZLIB   ="
            else:
                print "HAVE_ZLIB   = %s" % os.path.abspath(myargs['zlib'])
        return

    _prefix = ''
    if os.path.exists('%s/settings.mk' % _projhome):
        for line in open('%s/settings.mk' % _projhome, 'r'):
            if line.lstrip().startswith('#'):
                continue
            if 'PREFIX' in line.strip():
                if line.strip().split('=')[0].strip() == 'PREFIX':
                    _prefix = line.strip().split('=')[1].strip()
                break
    if 'PREFIX' in os.environ:
        _prefix = "%s" % os.environ['PREFIX']
    elif os.path.exists(_prefix):
        pass
    else:
        if os.path.exists("%s/deployment" % _projhome):
            _prefix = "%s/deployment" % _projhome

    if args.subcommand == 'installed':
        for mypkg in glob('%s/var/pkg/*' % _prefix):
            print os.path.basename(mypkg)
        return

    if args.subcommand == 'uninstall':
        myargs = vars(args)
        if myargs['name'] is None:
            return
        mypath = '%s/var/pkg/%s' % (_prefix, myargs['name'])
        if os.path.exists(mypath):
            with open(mypath) as f:
                content = f.readlines()
            if ' uninstall ' in content[0]:
                try:
                    print '%s/bin/pip uninstall -y %s' % (_prefix, content[0].strip().split(' ')[-1])
                    backticks('%s/bin/pip uninstall -y %s' % (_prefix, content[0].strip().split(' ')[-1]))
                except:
                    pass
            for myfile in content:
                myfile = '%s/%s' % (_prefix, myfile.strip())
                if os.path.isfile(myfile) or os.path.islink(myfile):
                    print 'rm -f %s' % myfile
                    try:
                        os.remove(myfile)
                    except:
                        pass
            for myfile in content:
                myfile = '%s/%s' % (_prefix, myfile.strip())
                if os.path.isdir(myfile):
                    print 'rmdir %s||true' % myfile
                    try:
                        os.rmdir(myfile)
                    except:
                        pass
            os.remove(mypath)
            return
        print 'Package %s not found.' % myargs['name']
        if len(glob('%s/var/pkg/%s*' % (_prefix, myargs['name']))) > 0:
            print 'Nothing is done, did you mean:'
            for mypkg in glob('%s/var/pkg/%s*' % (_prefix, myargs['name'])):
                print os.path.basename(mypkg)
        return

    if args.subcommand == 'fetch':
        myargs = vars(args)

        _distfiles = ''
        if 'DISTFILES' in os.environ:
            _distfiles = "%s" % os.environ['DISTFILES']
        elif os.path.exists('%s/settings.mk' % _projhome):
            for line in open('%s/settings.mk' % _projhome, 'r'):
                if 'DISTFILES' in line.strip():
                    if line.strip().split('=')[0].strip() == 'DISTFILES':
                        _distfiles = line.strip().split('=')[1].strip()
                    break
        if os.path.exists(_distfiles):
            pass
        else:
            if os.path.exists("%s/distfiles" % _projhome):
                _distfiles = "%s/distfiles" % _projhome

        if not os.path.exists('MD5SUM'):
            log('[ERROR] MD5SUM file not found')
            raise Exception()
        if myargs['url'] is not None:
            _url = myargs['url']
            _archive = _url.split('/')[-1]
            _prjname = os.path.basename(os.getcwd())
            if os.path.exists('%s/%s' % (_distfiles, _prjname)):
                pass
            else:
                try:
                    os.mkdir('%s/%s' % (_distfiles, _prjname))
                except:
                    raise Exception()
            _prefetch = '/'.join([_distfiles, _prjname, _archive])
            if os.path.exists(_prefetch):
                print "using local %s" % _archive
                backticks('rm -f ./%s' % os.path.basename(_prefetch))
                backticks('ln -sfn %s ./' % _prefetch)
                try:
                    backticks('md5sum -c MD5SUM')
                    return
                except:
                    pass
            try:
                print "fetching %s" % _url
                backticks('curl -L -O %s' % _url)
            except:
                raise Exception()
            try:
                backticks('md5sum -c MD5SUM')
                backticks('cp %s %s/%s' % (_archive, _distfiles, _prjname))
                return
            except:
                raise Exception()

        log('[ERROR] you need to specify --url')
        raise Exception()
    raise Exception()


def main(argv=sys.argv):
    """Main"""
    pargs = parseargs(argv)
    try:
        pitchfork(pargs)
    except Exception:
        log(repr(vars(pargs)))
        raise
    return 0

if __name__ == '__main__':
    sys.exit(main())
