#!/usr/bin/env python
import sys
import os
from glob import glob
import _argparse as argparse
import select
import termios

__VERSION__ = '0.0.2'
_whatami  = os.path.basename(sys.argv[0])
_ownpath  = os.path.abspath(__file__)
_whereami = os.path.dirname(_ownpath)
_projhome = os.path.dirname(_whereami)

VERBOSE = os.environ.get('VERBOSE')
try:
    VERBOSE = int(VERBOSE)
except Exception:
    pass

PY3K = sys.version_info >= (3, 0)

def backticks(cmd, merge_stderr=True, checked=False):
    """
    Simulates the perl backticks (``) command with error-handling support
    Returns ( command output as sequence of strings, error code, error message )
    """
    import subprocess
    if VERBOSE:
        print ("`{0}`".format(cmd))
    if merge_stderr:
        _stderr = subprocess.STDOUT
    else:
        _stderr = subprocess.PIPE

    p = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE, stderr=_stderr,
                         close_fds=True)

    if not PY3K:
        out = [l[:-1] for l in p.stdout.readlines()]
    else:
        out = [l[:-1].decode('utf-8', 'backslashreplace') for l in p.stdout.readlines()]

    p.stdout.close()
    if not merge_stderr:
        p.stderr.close()

    # need to allow process to terminate
    p.wait()

    errCode = int(p.returncode)
    if p.returncode > 0:
        errorMessage = os.linesep.join(out)
        output = []
    else:
        errorMessage = ''
        output = out

    if checked and errCode:
        raise Exception('{0} <- `{1}`\n\t{2}'.format(
            errCode, cmd, errorMessage))
    return output, errCode, errorMessage


def log(*msgs):
    sys.stderr.write(' '.join(str(m) for m in msgs) + '\n')


class KeyPoller():
    def __enter__(self):
        # Save the terminal settings
        self.fd = sys.stdin.fileno()
        self.new_term = termios.tcgetattr(self.fd)
        self.old_term = termios.tcgetattr(self.fd)

        # New terminal setting unbuffered
        self.new_term[3] = (self.new_term[3] & ~termios.ICANON & ~termios.ECHO)
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.new_term)

        return self

    def __exit__(self, type, value, traceback):
        termios.tcsetattr(self.fd, termios.TCSAFLUSH, self.old_term)

    def poll(self):
        dr,dw,de = select.select([sys.stdin], [], [], 0)
        if not dr == []:
            return sys.stdin.read(1)
        return None


def parseargs(args):
    desc = 'The UNOFFICIAL pacbio pitchfork building system.'
    epil = 'This gets you a subroot-like software deployment. The deployment is unrelocatable but easier to understand.'
    parser = argparse.ArgumentParser(
        epilog=epil,
        description=desc)

    parser.add_argument('-V', '--version', help='show version', action='version', version='%s' % __VERSION__)

    subparsers = parser.add_subparsers(
        dest='subcommand',
        title='subcommands',
        help='Run %s --help for more information' % _whatami)

    sub = subparsers.add_parser('configure',
                                help='prints out suggested settings.mk',
                                description='''What's in your settings.mk?''')
    sub.add_argument('--prefix',
                     metavar='<path>',
                     type=str,
                     help='The path of where you want to deploy software to.')
    sub.add_argument('--workdir',
                     metavar='<path>',
                     type=str,
                     help='The path of where you want to build software on.')
    sub.add_argument('--ccache', action='store_true', help='build ccache, too.')

    sub = subparsers.add_parser('installed',
                                help='''Check what's being installed''',
                                description='This will look into the PREFIX directories and list what has been installed.')

    sub = subparsers.add_parser('uninstall', help='''remove a previous installed package''')
    sub.add_argument('name',
                     metavar='<package>',
                     type=str,
                     help='The name of the package.')

    sub = subparsers.add_parser('fetch',
                                help='download and check file',
                                description='''this download a file from url and check the MD5 sum.''')
    sub.add_argument('--url',
                     metavar='<url>',
                     type=str,
                     help='The url of distfile.')

    sub = subparsers.add_parser('sconf',
                                help='show configurations.',
                                description='''What's in your settings.mk?''')
    sub.add_argument('--prefix', action='store_true', help='prints out PREFIX value.')

    sub = subparsers.add_parser('startover',
                                help = 'clean up pitchfork',
                                description='''To startover, type y''')

    return parser.parse_args()


def pitchfork(args):
    # log('[INFO] args:', args)
    if args.subcommand == 'configure':
        import readline
        myargs = vars(args)
        if myargs['prefix']:
            _prefix = myargs['prefix']
        else:
            _prefix = '%s/deployment' % _projhome
            line = raw_input('path of PREFIX? ("stop" to quit, press enter to skip): ')
            if line == 'stop':
                return
            elif not line == '':
                _prefix = line
        if not os.path.exists(os.path.dirname(_prefix)):
            log("[ERROR] '%s' not found." % os.path.dirname(_prefix))
            sys.exit(1)
        if myargs['workdir']:
            _workdir = myargs['workdir']
        else:
            _workdir = '%s/workspace' % _projhome
            line = raw_input('path of WORKDIR? ("stop" to quit, press enter to skip): ')
            if line == 'stop':
                return
            elif not line == '':
                _workdir = line
        if not os.path.exists(os.path.dirname(_workdir)):
            log("[ERROR] '%s' not found." % os.path.dirname(_workdir))
            sys.exit(1)
        _distfiles = '%s/distfiles' % _projhome
        line = raw_input('path for download? ("stop" to quit, press enter to skip): ')
        if line == 'stop':
            return
        elif not line == '':
            _distfiles = line
        if not os.path.exists(os.path.dirname(_distfiles)):
            log("[ERROR] '%s' not found." % os.path.dirname(_distfiles))
            sys.exit(1)
        print ("# please copy following lines into your settings.mk file")
        if myargs['ccache']:
            print ("USE_CCACHE  = yes")
        print ("PREFIX      = %s" % _prefix)
        print ("WORKDIR     = %s" % _workdir)
        print ("DISTFILES   = %s" % _distfiles)
        return

    _prefix = ''
    _workdir = ''
    if os.path.exists('%s/settings.mk' % _projhome):
        for line in open('%s/settings.mk' % _projhome, 'r'):
            if line.lstrip().startswith('#'):
                continue
            if 'PREFIX' in line.strip():
                if line.strip().split('=')[0].strip() == 'PREFIX':
                    _prefix = line.strip().split('=')[1].strip()
                    _prefix = _prefix.replace('${HOME}', os.getenv('HOME'))
                    _prefix = _prefix.replace('$(HOME)', os.getenv('HOME'))
                    continue
            if 'WORKDIR' in line.strip():
                if line.strip().split('=')[0].strip() == 'WORKDIR':
                    _workdir = line.strip().split('=')[1].strip()
                    _workdir = _workdir.replace('${HOME}', os.getenv('HOME'))
                    _workdir = _workdir.replace('$(HOME)', os.getenv('HOME'))
                    continue

    if 'PREFIX' in os.environ:
        _prefix = "%s" % os.environ['PREFIX']
    elif os.path.exists(_prefix):
        pass
    else:
        if os.path.exists("%s/deployment" % _projhome):
            '''RISK: PREFIX default should not be set here'''
            _prefix = "%s/deployment" % _projhome
    if 'WORKDIR' in os.environ:
        _workdir = "%s" % os.environ['WORKDIR']
    elif os.path.exists(_workdir):
        pass
    else:
        if os.path.exists("%s/workspace" % _projhome):
            '''RISK: WORKDIR default should not be set here'''
            _workdir = "%s/workspace" % _projhome
    if 'PIP_CACHE' in os.environ:
        _pipcache = "%s" % os.environ['PIP_CACHE']
    elif os.path.exists("%s/.git/pip" % _projhome):
        '''RISK: PIP_CACHE default should not be set here'''
        _pipcache = "%s/.git/pip" % _projhome
    else:
        _pipcache = ""

    if args.subcommand == 'sconf':
        myargs = vars(args)
        if myargs['prefix']:
            print (_prefix)
        return

    if args.subcommand == 'installed':
        for mypkg in glob('%s/var/pkg/*' % _prefix):
            print (os.path.basename(mypkg))
        return

    if args.subcommand == 'startover':
        print("This will erase everything in %s/, staging/ and %s/ directories." % (_prefix, _workdir))
        if ' ' in _prefix or ' ' in _workdir:
            print("empty char is not compatible with startover feature.")
            return
        sys.stdout.write("Are you sure?\n[y/n] ")
        sys.stdout.flush()
        with KeyPoller() as keyPoller:
            while True:
                c = keyPoller.poll()
                if not c is None:
                    if c.lower() == "y":
                        sys.stdout.write("y\n")
                        # use VERBOSE=1 for debug
                        _out, _exit, _err = backticks("rm -rf %s/* %s/.Python %s/staging/* %s/*" % (_prefix, _prefix, _projhome, _workdir))
                        _out, _exit, _err = backticks("cd %s/ports && git clean -xdf" % _projhome)
                        if _pipcache != '':
                            _out, _exit, _err = backticks("find %s -name '*_x86_64.whl' -delete -print" % _pipcache)
                        break
                    elif c.lower() == 'n':
                        print ("n\nstartover cancelled")
                        return
                    elif c.lower() == 'q':
                        print ("q\nstartover cancelled")
                        return
                    else:
                        sys.stdout.write("y or n key is required\n[y/n] ")
                        sys.stdout.flush()
        return

    if args.subcommand == 'uninstall':
        myargs = vars(args)
        if myargs['name'] is None:
            return
        if '*' in myargs['name']:
            return
        if myargs['name'] == '':
            return
        mypath = '%s/var/pkg/%s' % (_prefix, myargs['name'])
        if not os.path.exists(mypath):
            _list = glob('%s*' % mypath)
            if len(_list) > 0:
                mypath = _list[0]
        if os.path.exists(mypath):
            with open(mypath) as f:
                content = f.readlines()
            if ' uninstall ' in content[0]:
                print ('%s/bin/pip uninstall -y %s' % (_prefix, content[0].strip().split(' ')[-1]))
                _out, _exit, _err = backticks('%s/bin/pip uninstall -y %s' % (_prefix, content[0].strip().split(' ')[-1]))
            for myfile in content:
                if myfile[0] == '#':
                    continue
                myfile = '%s/%s' % (_prefix, myfile.strip())
                if os.path.islink(myfile) and os.path.isdir(myfile):
                    continue
                if os.path.isfile(myfile) or os.path.islink(myfile):
                    print ('rm -f %s' % myfile)
                    try:
                        os.remove(myfile)
                    except:
                        pass
            for myfile in content:
                if myfile[0] == '#':
                    continue
                myfile = '%s/%s' % (_prefix, myfile.strip())
                if os.path.isdir(myfile):
                    print ('rmdir %s||true' % myfile)
                    try:
                        os.rmdir(myfile)
                    except:
                        pass
            os.remove(mypath)
            return
        log('Package %s not found.' % myargs['name'])
        if len(glob('%s/var/pkg/%s*' % (_prefix, myargs['name']))) > 0:
            print ('Nothing is done, did you mean:')
            for mypkg in glob('%s/var/pkg/%s*' % (_prefix, myargs['name'])):
                print (os.path.basename(mypkg))
        return

    if args.subcommand == 'fetch':
        myargs = vars(args)

        _distfiles = ''
        if 'DISTFILES' in os.environ:
            _distfiles = "%s" % os.environ['DISTFILES']
        elif os.path.exists('%s/settings.mk' % _projhome):
            for line in open('%s/settings.mk' % _projhome, 'r'):
                if 'DISTFILES' in line.strip():
                    if line.strip().split('=')[0].strip() == 'DISTFILES':
                        _distfiles = line.strip().split('=')[1].strip()
                        _distfiles = _distfiles.replace('${HOME}', os.getenv('HOME'))
                        _distfiles = _distfiles.replace('$(HOME)', os.getenv('HOME'))
                    break
        if os.path.exists(_distfiles):
            pass
        else:
            if os.path.exists("%s/distfiles" % _projhome):
                _distfiles = "%s/distfiles" % _projhome

        if not os.path.exists('MD5SUM'):
            log('[ERROR] MD5SUM file not found')
            raise Exception()
        if myargs['url']:
            _url = myargs['url']
            _archive = _url.split('/')[-1]
            _prjname = os.path.basename(os.getcwd())
            if os.path.exists('%s/%s' % (_distfiles, _prjname)):
                pass
            else:
                try:
                    # print ('%s/%s' % (_distfiles, _prjname))
                    os.mkdir('%s/%s' % (_distfiles, _prjname))
                except:
                    raise Exception()
            _prefetch = '/'.join([_distfiles, _prjname, _archive])
            if _archive == '':
                log("[ERROR] _archive is empty")
                raise Exception()
            if os.path.exists(_prefetch):
                print ("using local %s" % _archive)
                try:
                    _out, _exit, _err = backticks('rm -f ./%s' % os.path.basename(_prefetch))
                    _out, _exit, _err = backticks('ln -sfn %s ./' % _prefetch)
                    _out, _exit, _err = backticks('grep %s MD5SUM | md5sum -c -' % os.path.basename(_prefetch), checked=True)
                    return
                except Exception:
                    _out, _exit, _err = backticks('rm -f %s %s' % (_archive, _distfiles))
                    if os.path.exists(_prefetch):
                        os.remove(_prefetch)
                    raise
            print ("fetching %s" % _url)
            _out, _exit, _err = backticks('which curl || which wget')
            if not _exit == 0:
                raise Exception('[ERROR] please install curl or wget')
            elif len(_out) < 1:
                raise Exception('[ERROR] `which` return nothing')
            elif 'curl' in _out[0]:
                _fetch = 'curl -k -L -O'
            elif 'wget' in _out[0]:
                _fetch = 'wget'
            _out, _exit, _err = backticks('lsb_release -d')
            if _exit != 0:
                _fetch = 'wget'
            elif len(_out) < 1:
                _fetch = 'wget'
            elif "CentOS Linux release 7." in _out[0]:
                _fetch = 'wget'
            elif "Ubuntu 12." in _out[0]:
                from distutils.version import LooseVersion
                _out, _exit, _err = backticks("dpkg --list|grep libssl1.0.0|awk '{print $3}'")
                if _exit != 0:
                    pass
                elif LooseVersion("1.0.1-4ubuntu5.39") > LooseVersion(_out[0]):
                    raise Exception("[ERROR] `apt-get install libssl1.0.0` to fix download issue.")
                else:
                    pass
                _fetch = 'wget'
            else:
                _fetch = 'wget'
                pass
            _out, _exit, _err = backticks('%s %s' % (_fetch, _url))
            if _exit != 0:
                raise Exception("[ERROR] %s" % ''.join(_err))
            _out, _exit, _err = backticks('grep %s MD5SUM | md5sum -c -' % os.path.basename(_prefetch), checked=True)
            _out, _exit, _err = backticks('cp %s %s/%s' % (_archive, _distfiles, _prjname))
            return

        raise Exception('[ERROR] you need to specify --url')

    raise Exception('Unknown subcommand: {!r}'.format(args.subcommand))


def main(argv=sys.argv):
    """Main"""
    pargs = parseargs(argv)
    try:
        pitchfork(pargs)
    except Exception:
        log(repr(vars(pargs)))
        raise
    return 0

if __name__ == '__main__':
    sys.exit(main())
